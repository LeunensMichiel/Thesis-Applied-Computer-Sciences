% Encoding: UTF-8

@InProceedings{Runtime2017,
  author    = {Davide Ancona and Luca Franceschini and Giorgio Delzanno and Maurizio Leotta and Marina Ribaudo and Filippo Ricca},
  title     = {Towards Runtime Monitoring of Node.js and Its Application to the Internet of Things},
  booktitle = {Proceedings First Workshop on Architectures, Languages and Paradigms for IoT, ALP4IoT@iFM 2017, Turin, Italy, September 18, 2017.},
  year      = {2017},
  pages     = {27--42},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1802-01790},
  crossref  = {DBLP:journals/corr/abs-1802-00976},
  doi       = {10.4204/EPTCS.264.4},
  timestamp = {Wed, 12 Sep 2018 01:05:14 +0200},
  url       = {https://doi.org/10.4204/EPTCS.264.4},
}

@Article{Alhamazani2013,
  author        = {Khalid Alhamazani and Rajiv Ranjan and Karan Mitra and Fethi A. Rabhi and Samee Ullah Khan and Adnene Guabtni and Vasudha Bhatnagar},
  title         = {An Overview of the Commercial Cloud Monitoring Tools: Research Dimensions, Design Issues, and State-of-the-Art},
  journal       = {CoRR},
  year          = {2013},
  volume        = {abs/1312.6170},
  archiveprefix = {arXiv},
  bibsource     = {dblp computer science bibliography, https://dblp.org},
  biburl        = {https://dblp.org/rec/bib/journals/corr/AlhamazaniRMRKGB13},
  eprint        = {1312.6170},
  file          = {:D\:/michi/Documents/Schooljaar 2018-2019/Bachelorproef/bachelorproefTI-2019/papers/alhamazani2014.pdf:PDF},
  timestamp     = {Mon, 13 Aug 2018 16:47:32 +0200},
  url           = {http://arxiv.org/abs/1312.6170},
}

@Article{Chaniotis2015,
  author   = {Chaniotis, Ioannis K. and Kyriakou, Kyriakos-Ioannis D. and Tselikas, Nikolaos D.},
  title    = {Is Node.js a viable option for building modern web applications? A performance evaluation study},
  journal  = {Computing},
  year     = {2015},
  volume   = {97},
  number   = {10},
  pages    = {1023--1044},
  month    = {Oct},
  issn     = {1436-5057},
  abstract = {We examine the implications of end-to-end web application development, in the social web era. The paper describes a distributed architecture, suitable for modern web application development, as well as the interactivity components associated with it. Furthermore, we conducted a series of stress tests, on popular server side technologies. The PHP/Apache stack was found inefficient to address the increasing demand in network traffic. Nginx was found more than 2.5 times faster in input/output (I/O) operations than Apache, whereas Node.js outperformed both. Node.js, although excellent in I/O operations and resource utilization, was found lacking in serving static files using its built in HTTP server, while Nginx performed great at this task. So, in order to address efficiency, an Nginx server could be placed in-front and proxy static file requests, allowing the Node.js processes to only handle dynamic content. Such a configuration can offer a better infrastructure in terms of efficiency and scalability, replacing the aged PHP/Apache stack. Furthermore we have found that building cross platform applications based on web technologies, is both feasible and highly productive, especially when addressing stationary and mobile devices, as well as the fragmentation among them. Our study concludes that Node.js offers client-server development integration, aiding code reusability in web applications, and is the perfect tool for developing fast, scalable network applications.},
  day      = {01},
  doi      = {10.1007/s00607-014-0394-9},
  file     = {:D\:/michi/Documents/Schooljaar 2018-2019/Bachelorproef/bachelorproefTI-2019/papers/chaniotis2014.pdf:PDF},
  url      = {https://doi.org/10.1007/s00607-014-0394-9},
}

@Article{DILUCCA20061172,
  author   = {Giuseppe A. Di Lucca and Anna Rita Fasolino},
  title    = {Testing Web-based applications: The state of the art and future trends},
  journal  = {Information and Software Technology},
  year     = {2006},
  volume   = {48},
  number   = {12},
  pages    = {1172 - 1186},
  issn     = {0950-5849},
  note     = {Quality Assurance and Testing of Web-Based Applications},
  abstract = {Software testing is a difficult task and testing Web-based applications may be even more difficult, due to the peculiarities of such applications. In the last years, several problems in the field of Web-based applications testing have been addressed by research work, and several methods and techniques have been defined and used to test Web-based applications effectively. This paper will present the main differences between Web-based applications and traditional ones, how these differences impact the testing of the former ones, and some relevant contributions in the field of Web application testing developed in recent years. The focus is mainly on testing the functionality of a Web-based application, even if some discussion about the testing of non-functional requirements is provided too. Some indications about future trends in Web application testing are also outlined in the paper.},
  doi      = {https://doi.org/10.1016/j.infsof.2006.06.006},
  file     = {:D\:/michi/Documents/Schooljaar 2018-2019/Bachelorproef/bachelorproefTI-2019/papers/dilucca2006.pdf:PDF},
  keywords = {Web engineering, Web application testing, Software testing},
  url      = {http://www.sciencedirect.com/science/article/pii/S0950584906000851},
}

@Article{Garousi2016,
  author  = {Garousi, Vahid and Mäntylä, Mika},
  title   = {When and what to automate in software testing? A multi-vocal literature review},
  journal = {Information and Software Technology},
  year    = {2016},
  volume  = {76},
  month   = {04},
  doi     = {10.1016/j.infsof.2016.04.015},
  file    = {:D\:/michi/Documents/Schooljaar 2018-2019/Bachelorproef/bachelorproefTI-2019/papers/garousi2016.pdf:PDF},
}

@Article{Hernantes2015,
  author    = {J. Hernantes and G. Gallardo and N. Serrano},
  title     = {IT Infrastructure-Monitoring Tools},
  journal   = {IEEE Software},
  year      = {2015},
  volume    = {32},
  number    = {04},
  pages     = {88-93},
  month     = {jul},
  issn      = {0740-7459},
  address   = {Los Alamitos, CA, USA},
  doi       = {10.1109/MS.2015.96},
  file      = {:D\:/michi/Documents/Schooljaar 2018-2019/Bachelorproef/bachelorproefTI-2019/papers/hernantes2015.pdf:PDF},
  keywords  = {monitoring;electronic mail;information technology;cloud computing;maintenance engineering},
  publisher = {IEEE Computer Society},
}

@InProceedings{Maentylae2013,
  author    = {M. V. {Mäntylä} and F. {Khomh} and B. {Adams} and E. {Engström} and K. {Petersen}},
  title     = {On Rapid Releases and Software Testing},
  booktitle = {2013 IEEE International Conference on Software Maintenance},
  year      = {2013},
  pages     = {20-29},
  month     = {Sep.},
  abstract  = {Large open and closed source organizations like Google, Facebook and Mozilla are migrating their products towards rapid releases. While this allows faster time-to-market and user feedback, it also implies less time for testing and bug fixing. Since initial research results indeed show that rapid releases fix proportionally less reported bugs than traditional releases, this paper investigates the changes in software testing effort after moving to rapid releases. We analyze the results of 312,502 execution runs of the 1,547 mostly manual system level test cases of Mozilla Fire fox from 2006 to 2012 (5 major traditional and 9 major rapid releases), and triangulated our findings with a Mozilla QA engineer. In rapid releases, testing has a narrower scope that enables deeper investigation of the features and regressions with the highest risk, while traditional releases run the whole test suite. Furthermore, rapid releases make it more difficult to build a large testing community, forcing Mozilla to increase contractor resources in order to sustain testing for rapid releases.},
  doi       = {10.1109/ICSM.2013.13},
  file      = {:D\:/michi/Documents/Schooljaar 2018-2019/Bachelorproef/bachelorproefTI-2019/papers/mantyla2013.pdf:PDF},
  issn      = {1063-6773},
  keywords  = {program testing;rapid release models;software testing;manual system-level test cases;Mozilla Firefox;Mozilla QA engineer;Computer bugs;Measurement;Software;Software testing;Google;Browsers;Software testing;release model;builds;bugs;opensource;agile releases;Mozilla},
}

@Article{Wong2016,
  author   = {W. E. {Wong} and R. {Gao} and Y. {Li} and R. {Abreu} and F. {Wotawa}},
  title    = {A Survey on Software Fault Localization},
  journal  = {IEEE Transactions on Software Engineering},
  year     = {2016},
  volume   = {42},
  number   = {8},
  pages    = {707-740},
  month    = {Aug},
  issn     = {0098-5589},
  abstract = {Software fault localization, the act of identifying the locations of faults in a program, is widely recognized to be one of the most tedious, time consuming, and expensive - yet equally critical - activities in program debugging. Due to the increasing scale and complexity of software today, manually locating faults when failures occur is rapidly becoming infeasible, and consequently, there is a strong demand for techniques that can guide software developers to the locations of faults in a program with minimal human intervention. This demand in turn has fueled the proposal and development of a broad spectrum of fault localization techniques, each of which aims to streamline the fault localization process and make it more effective by attacking the problem in a unique way. In this article, we catalog and provide a comprehensive overview of such techniques and discuss key issues and concerns that are pertinent to software fault localization as a whole.},
  doi      = {10.1109/TSE.2016.2521368},
  file     = {:D\:/michi/Documents/Schooljaar 2018-2019/Bachelorproef/bachelorproefTI-2019/papers/wong2016.pdf:PDF},
  keywords = {program debugging;software reliability;software fault localization;program debugging;software developers;program fault locations;human intervention;Debugging;Software engineering;Computer bugs;Software debugging;Fault diagnosis;Complexity theory;Software fault localization;program debugging;software testing;execution trace;suspicious code;survey},
}

@Manual{Javascript2019,
  title        = {What is JavaScript?},
  organization = {Mozilla},
  year         = {2019},
  url          = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction#What_is_JavaScript},
}

@Electronic{Rangpariya2019,
  author = {Nikhil Rangpariya},
  year   = {2019},
  title  = {Evolution of JavaScript: Revolution of Web Development},
  url    = {https://medium.com/swlh/evolution-of-javascript-revolution-of-web-development-5df234a617e6},
}

@Electronic{Wiley2016,
  author       = {Wiley},
  year         = {2016},
  title        = {What is JavaScript?},
  organization = {Wiley},
  url          = {http://media.wiley.com/product_data/excerpt/88/07645790/0764579088.pdf},
}

@Electronic{Kantor2017,
  author       = {Ilya Kantor},
  year         = {2017},
  title        = {Dom tree},
  organization = {javascript.info},
  url          = {https://javascript.info/dom-nodes},
}

@Electronic{Patel2018,
  author = {Priyesh Patel},
  year   = {2018},
  title  = {What exactly is Node.js?},
  url    = {https://medium.freecodecamp.org/what-exactly-is-node-js-ae36e97449f5},
}

@Electronic{Chandrayan2017,
  author = {Pramod Chandrayan},
  year   = {2017},
  title  = {All About Node.js you wanted to know},
  url    = {https://codeburst.io/all-about-node-js-you-wanted-to-know-25f3374e0be7},
}

@Electronic{SimilarTech,
  author       = {SimilarTech},
  title        = {NodeJs Vs PHP},
  organization = {SimilarTech},
  url          = {https://www.similartech.com/compare/nodejs-vs-php},
}

@Misc{Mehmet2016,
  author = {Mehmet BAT},
  title  = {Infographic on Node.js},
  year   = {2016},
  url    = {https://coderwall.com/p/_ukoeg/infographic-on-node-js},
}

@Comment{jabref-meta: databaseType:bibtex;}
